"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import ast
import subprocess

from pathlib import Path
from logging.handlers import SysLogHandler


def get_environ_vars():
    # for production
    completed_process = subprocess.run(
        ['/opt/elasticbeanstalk/bin/get-config', 'environment'],
        stdout=subprocess.PIPE,
        text=True,
        check=True
    )

    return ast.literal_eval(completed_process.stdout)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--$*acn0u=00==bpis&$ym-9nt5_tr_*tcdwd38#s6rxppqj#4$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# reading .env file
ENV_VARS = {}


if DEBUG:
    ALLOWED_HOSTS = ['testproject.eu-north-1.elasticbeanstalk.com', '127.0.0.1']

else:
    ENV_VARS = get_environ_vars()
    ALLOWED_HOSTS = ENV_VARS['ALLOWED_PROD_HOST'].replace(' ', '').split(',')
    # ALLOWED_HOSTS = ['testproject.eu-north-1.elasticbeanstalk.com', 
    #                     '51.21.112.20', '172.31.28.236']

# Application definition

if not DEBUG:
    CORS_ALLOWED_ORIGINS = ENV_VARS['ALLOWED_CORS'].replace(' ', '').split(',')

    CORS_ORIGIN_WHITELIST = ENV_VARS['ALLOWED_CORS'].replace(' ', '').split(',')
    CSRF_TRUSTED_ORIGINS = ENV_VARS['ALLOWED_CORS'].replace(' ', '').split(',')

INSTALLED_APPS = [
    'channels',
    'daphne',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'chat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'
ASGI_APPLICATION = 'myproject.asgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    
else:
    DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql_psycopg2',
                'NAME': ENV_VARS['PROD_DB_NAME'],
                'USER': ENV_VARS['PROD_DB_USER'],
                'PASSWORD': ENV_VARS['PROD_DB_PASSWORD'],
                'HOST': ENV_VARS['PROD_DB_HOST'],
                'PORT': ENV_VARS['PROD_DB_PORT'],
            }
        }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR.joinpath('static')


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


################## channels settings




if DEBUG:
    CHANNEL_HOST = 'redis://127.0.0.1:6379'

else:
    CHANNEL_HOST = f"redis://{ENV_VARS['REDIS_PROD_HOST']}"
    # CHANNEL_HOST = f"redis://{os.environ['REDIS_PROD_HOST']}"


CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [CHANNEL_HOST],
        },
    },
}


if not DEBUG:
    AWS_ACCESS_KEY_ID = ENV_VARS['AWS_ACCESS_KEY_ID']
    AWS_SECRET_ACCESS_KEY = ENV_VARS['AWS_SECRET_ACCESS_KEY']
    AWS_STORAGE_BUCKET_NAME = ENV_VARS['AWS_STORAGE_BUCKET_NAME']

    AWS_S3_REGION_NAME = ENV_VARS['AWS_S3_REGION_NAME']
    AWS_QUERYSTRING_AUTH = False # True/False value
    AWS_S3_CUSTOM_DOMAIN = f"{ENV_VARS['AWS_S3_CUSTOM_DOMAIN']}.s3.amazonaws.com" 
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': f'max-age={86400}'}
    AWS_DEFAULT_ACL = 'public-read'

    DEFAULT_FILE_STORAGE = 'myproject.s3storage.MediaStore'
    MEDIA_URL = '/media/'


# enables logging in production
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'formatters': {
        'verbose': {
            'format': '[contactor] %(levelname)s %(asctime)s %(message)s'
        },
    },
    'handlers': {
        # Send all messages to console
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
        # Send info messages to syslog
        'syslog':{
            'level':'INFO',
            'class': 'logging.handlers.SysLogHandler',
            'facility': SysLogHandler.LOG_LOCAL2,
            'address': '/dev/log',
            'formatter': 'verbose',
        },
        # Warning messages are sent to admin emails
        'mail_admins': {
            'level': 'WARNING',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
        },
    },
    'loggers': {
        # This is the "catch all" logger
        '': {
            'handlers': ['console', 'syslog', 'mail_admins'],
            'level': 'DEBUG',
            'propagate': False,
        },
    }
}